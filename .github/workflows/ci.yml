name: CI / CD – Polyglot Starter

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  setup-build-test:
    name: 🧪 Install, Build & Test
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      # ------------------------------
      # 1. Checkout the repository
      # ------------------------------
      - name: 🛎️ Checkout repository
        uses: actions/checkout@v4

      # ------------------------------
      # 2. Setup Node.js (v18+)
      # ------------------------------
      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      # ------------------------------
      # 3. Enable Corepack & install pnpm
      # ------------------------------
      - name: ⚙️ Enable Corepack & Prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm -v

      # ------------------------------
      # 4. Cache pnpm store for faster installs
      # ------------------------------
      - name: 🧱 Setup pnpm Cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # ------------------------------
      # 5. Install dependencies via setup.sh
      # ------------------------------
      - name: 📦 Install Dependencies
        run: |
          chmod +x setup.sh
          ./setup.sh --skip-dev-servers
        env:
          CI: true

      # ------------------------------
      # 6. Verify build artifacts
      # ------------------------------
      - name: ✅ Verify Build Artifacts
        run: |
          echo "Verifying workspace builds..."
          for ws in api proxy web; do
            if [ -d "$ws" ]; then
              echo "→ Checking $ws build output..."
              ls -la "$ws" || true
            fi
          done

      # ------------------------------
      # 7. Lint & test (if scripts exist)
      # ------------------------------
      - name: 🧹 Run Lint & Tests (optional)
        run: |
          pnpm -r run lint --if-present
          pnpm -r run test --if-present

  # ========================================================================
  # Deploy Web (Vercel)
  # ========================================================================
  deploy-web:
    name: 🚀 Deploy Web (Vercel)
    needs: [setup-build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: ⚙️ Enable Corepack & Prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: | 
          npm i -g vercel
          cd web
          vercel pull --yes --token $VERCEL_TOKEN
          vercel build --token $VERCEL_TOKEN
          vercel deploy --prebuilt --token $VERCEL_TOKEN --prod

  # ========================================================================
  # Deploy API (Render)
  # ========================================================================
  deploy-api:
    name: ⚡ Deploy API (Render)
    needs: [setup-build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: ⚙️ Enable Corepack & Prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: 📦 Install & Build API
        run: |
          if [ -d "api" ]; then
            cd api
            corepack enable
            corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
            pnpm build --if-present
          else
            echo "No api workspace found; skipping API build."
          fi
        env:
          CI: true

  # ========================================================================
  # Optional: Docker image builds (GHCR)
  # ========================================================================
  docker-build:
    name: 🐳 Build & Push Docker Images
    needs: [setup-build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Images
        run: |
          for ws in api web proxy; do
            if [ -f "$ws/Dockerfile" ]; then
              IMAGE=ghcr.io/${{ github.repository_owner }}/$ws:latest
              echo "🚀 Building and pushing $IMAGE"
              docker build -t $IMAGE $ws
              docker push $IMAGE
            else
              echo "⚠️ No Dockerfile for $ws – skipping."
            fi
          done
